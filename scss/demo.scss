@import 'mixins/vr/vr-main';

$grid-break-s: 30rem;
$grid-break-m: 60rem;
$grid-break-l: 60rem;

$grid-gutter: $distance-m;

$black: #1f2128;
$gray: lighten($black, 7.5%);
$white: #fff;
$yellow: #fff6cc;
$red: #f12b24;
$brown: #bc9f75;

// Layout
body {
	padding: $paragraph-trailer 0 0;

	color: $white;

	background-color: $black;
}

header,
main,
footer {
	padding: 0 $grid-gutter;
}

header {
	@media (min-width: $grid-break-m) {
		position: fixed;
		top: $rhythm * 1.5;
		left: 0;

		width: (100% / 3);

		text-align: center;

		&:after {
			position: absolute;
			top: 100%;
			left: 50%;

			width: $border-width-m;
			height: 1000%;

			margin: $distance-m 0 0;

			background: $white;

			content: '';
		}
	}
}

main,
footer {
	@media (min-width: $grid-break-m) {
		margin-left: (100% / 3 * 1);
	}
}

section {
	$section-border-width: $border-width-m;
	$section-spacing: $distance-l * 2;

	overflow: hidden;

	margin: 0 0 ($section-spacing - $section-border-width);
	padding: 0 0 ($section-spacing - $paragraph-trailer);

	border-bottom: $section-border-width solid $white;
}


// Typography
a {
	color: $white;
}

blockquote {
	display: inline-block;

	margin: 0 0 $paragraph-trailer;
	padding: ($distance-l + $distance-l) $paragraph-trailer 0;

	background-color: $gray;
}

code {
	padding: $distance-m $distance-l;

	background-color: $gray;
	border-radius: $border-radius-s;
}

form {
	label {
		font-weight: bold;
	}

	legend {
		display: none;
	}

	fieldset,
	input,
	select,
	textarea {
		color: $white;

		background-color: $gray;
		border-color: $gray;
	}

	input {
		&[type=radio],
		&[type=checkbox] {
			+ label {
				font-weight: normal;
			}
		}
	}
}

h1, .h1,
h2, .h2,
h3, .h3,
h4, .h4,
h5, .h5,
h6, .h6 {
	font-weight: bold;
}

h5, .h5,
h6, .h6 {
	padding-bottom: $paragraph-trailer;
}

// <ol> is used to style the 'How it works' steps
ol {
	$counter-size: $rhythm * 1;

	margin: 0;
	padding: 0;

	list-style-type: none;

	counter-reset: how-to;

	li {
		@include vr-reset; // Because we use <h5> and <code> inside <li>

		position: relative; // For custom numbering

		padding: 0 0 ($paragraph-trailer + $distance-m) ($counter-size + $grid-gutter);

		// Custom numbering
		&:before {
			position: absolute;
			top: 0;
			left: 0;

			width: $counter-size;

			margin: (($distance-s + $border-width-m) * -1) 0 0;
			padding: $distance-s 0 0;

			color: $white;
			font-family: $font-display;
			font-weight: bold;
			text-align: center;

			border-top: $border-width-m solid $white;

			content: counter(how-to);
			counter-increment: how-to;
		}

		h5 {
			padding: 0; // Reset trailer
		}
	}
}

table {
	border-color: $gray;

	* {
		border-color: $gray;
	}

	tr {
		&:hover {
			background-color: $gray;
		}
	}
}

.table-wrapper {
	border-color: $gray;
}

// Elements
%btn {
	padding: ($distance-m + $distance-s) ($distance-l + $distance-s);

	color: $black;
	font-weight: bold;

	background-color: $white;
	border-color: transparent;
}

// Styling
.logo {
	$logo-item-size: 100% / 3;
	$logo-line-height: $rhythm * 3;

	@include vr($font-display, $font-size-xl);

	padding-bottom: $paragraph-trailer;

	font-weight: bold;
	line-height: $logo-line-height;

	// Clearfix
	&:after {
		clear: both;
		display: table;
		content: '';
	}

	&__letter {
		float: left;

		width: $logo-item-size;

		padding: 0 $grid-gutter;
	}

	&__item {
		float: left;

		width: 50%;
	}
}

.grid {
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	z-index: -1;
	display: flex;

	pointer-events: none;

	&__item {
		width: (100% / 3);

		margin: ($border-width-s * -1) ($grid-gutter - $border-width-s);

		border: $border-width-s solid $vr-color;
	}
}
