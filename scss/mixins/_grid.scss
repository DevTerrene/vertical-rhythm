//
// Breakpoint mixins
//

// Respond-to mixin
// Put style declarations within a media query.
// It will try to get the media query from the $breakpoints map.
//
// @param {key|value} $min-width Media media query name or value to start from.
// @param {key|value} [$max-width] Optional media query name or value to end (minus 1px of 0.01em/rem/etc).
//
// See: http://tzi.fr/css/responsive/prevent-double-breakpoint

@mixin respond-to($min-width, $max-width: false) {
	$min-width: convert-breakpoint($min-width);
	$max-width: if($max-width, convert-breakpoint($max-width), false);

	@if $max-width {
		$max-width: if(unit($max-width) == "px", $max-width - 1, $max-width - 0.01);

		@if ($min-width == 0) {
			@media (max-width: $max-width) {
				@content;
			}
		} @else {
			@media (min-width: $min-width) and (max-width: $max-width) {
				@content;
			}
		}
	} @else if ($min-width > 0) {
		@media (min-width: $min-width) {
			@content;
		}
	} @else {
		@content;
	}
}

// Convert the breakpoint keyword to its corresponding unit (em, rem, etc).
@function convert-breakpoint($break, $breakpoints: $grid-breakpoints) {
	$value: false;

	@if type-of($break) == number {
		// It's already a number.
		$value: $break;
	} @else if type-of($break) == string and map-has-key($breakpoints, $break) {
		// Otherwise get the value from the breakpoints map.
		$value: map-get($breakpoints, $break);
	} @else {
		@warn "Invalid $break parameter passed to @function convert-breakpoint(). Expected: valid map key or number value. Actual value: #{$break}";
	}

	@return $value;
}


//
// Breakpoint sync
//

// Expose breakpoints to the outside using the 'font-family' property
// Use the font-family property, because the 'font-size' property already uses keywords like 'medium' for its value.
// And it generates a pseudo element which contains all breakpoints with their sizes in the content.
// See: https://github.com/bjankord/Media-Query-Sync

@mixin breakpoint-sync($breakpoints: $grid-breakpoints) {
	$breaks: "";

	@each $name, $size in $breakpoints {
		@include respond-to($name) {
			font-family: #{$name};
		}

		$breaks: $breaks + $name + ":" + $size + "|";
	}

	&:after {
		content: $breaks; // Outputs "small:16rem|small:30rem|etc"
	}
}

//
// Grid mixins
//

// Description: VI Company grid
// Version: 1.0.1
// Last update: 10/09/2015
// Author: sebastiaan@vicompany.nl

// Create container
@mixin create-container($gutter: $grid-gutter) {
	margin-right: auto;
	margin-left: auto;
	padding-left: ($gutter / 2);
	padding-right: ($gutter / 2);
}


// Create row
@mixin create-row($gutter: $grid-gutter) {
	@include clearfix();

	margin-left: ($grid-gutter / -2);
	margin-right: ($grid-gutter / -2);
}


// Create col
@mixin create-col($gutter: $grid-gutter, $columns: $grid-columns, $breakpoints: $grid-breakpoints) {
	box-sizing: border-box;
	position: relative;
	float: left;

	width: 100%; // Mobile first
	min-height: 1px; // Prevent from collapsing when empty

	padding-left: ($gutter / 2);
	padding-right: ($gutter / 2);

	@each $name, $size in $breakpoints {
		$start: 1;
		$is-mobile: if($size == 0, true, false);

		@if $is-mobile {
			@for $column from $start through $columns {

				@include create-col-modifiers($column, $name, width, $is-mobile);

				@if $grid-use-push == true {
					@include create-col-modifiers($column, $name, push, $is-mobile);
				}

				@if $grid-use-pull == true {
					@include create-col-modifiers($column, $name, pull, $is-mobile);
				}

				@if $grid-use-offset == true {
					@include create-col-modifiers($column, $name, offset, $is-mobile);
				}

			}
		} @else {
			@include respond-to($name) {
				@for $column from $start through $columns {

					@include create-col-modifiers($column, $name, width, $is-mobile);

					@if $grid-use-push == true {
						@include create-col-modifiers($column, $name, push, $is-mobile);
					}

					@if $grid-use-pull == true {
						@include create-col-modifiers($column, $name, pull, $is-mobile);
					}

					@if $grid-use-offset == true {
						@include create-col-modifiers($column, $name, offset, $is-mobile);
					}

				}
			}
		}
	}
}

// Create column modifiers
@mixin create-col-modifiers($column, $breakpoint, $modifier, $is-mobile) {
	$breakpoint-class: if($is-mobile, "", "-" + $breakpoint); // On mobile don't prefix with MQ name
	$modifier-class: if($modifier == width, "", "-" + $modifier);

	&#{$breakpoint-class}#{$modifier-class}-#{$column} {
		@if $modifier == width {
			@include create-col-width-modifier($column);
		} @else if $modifier == push {
			@include create-col-push-modifier($column);
		} @else if $modifier == pull {
			@include create-col-pull-modifier($column);
		} @else if $modifier == offset {
			@include create-col-offset-modifier($column);
		} @else {
			@warn "Invalid $modifier parameter passed to @mixin create-col-modifiers().\nExpected: width, push, pull, offset\nActual: #{$modifier}";
		}
	}
}

@mixin create-col-width-modifier($column, $columns: $grid-columns) {
	width: percentage($column / $grid-columns);
}

@mixin create-col-push-modifier($column, $columns: $grid-columns) {
	left: if($column == 0, auto, percentage($column / $grid-columns));
}

@mixin create-col-pull-modifier($column, $columns: $grid-columns) {
	right: if($column == 0, auto, percentage($column / $grid-columns));
}

@mixin create-col-offset-modifier($column, $columns: $grid-columns) {
	margin-left: if($column == 0, 0, percentage($column / $grid-columns));
}

// Create helpers
@mixin create-grid-helpers($breakpoints: $grid-breakpoints) {
	$i: 1;
	$len: length($breakpoints);
	$break-sizes: map-values($breakpoints);

	@if ($grid-use-helpers == true) {
		@each $break-class, $break-size in $breakpoints {
			$i: $i + 1;
			$max-break-size: if($i <= $len, nth($break-sizes, $i), false); // TODO: use break up and down functions

			@include create-hidden-helper($break-class, $max-break-size);
		}
	}
}

// Create .hidden-{breakpoint} classes
@mixin create-hidden-helper($break-class, $max-break-size) {
	@include respond-to($break-class, $max-break-size) {
		.hidden-#{$break-class} {
			display: none;
		}
	}
}

//
// Grid setup
//

// Defaults
$grid-breakpoints:				(mobile: 0, small: 37.5rem, medium: 60rem, large: 80rem) !default;

$grid-columns: 					12 !default;
$grid-gutter: 					1rem !default;

$grid-use-push:					false !default;
$grid-use-pull:					false !default;
$grid-use-offset:				false !default;
$grid-use-helpers:				false !default;


// Grid classes
.container {
	@include create-container($grid-gutter);
}

.row {
	@include create-row($grid-gutter);
}

.col {
	@include create-col($grid-gutter);
}

[class^="col-"],
[class*=" col-"] {
	@extend .col;
}

// Create the grid and helpers!
@include create-grid-helpers();
